#!/bin/bash

# Executables
SUDO="/usr/bin/sudo"
XARGS="/usr/bin/xargs"
CHMOD="/bin/chmod"
CHGRP="/bin/chgrp"

# Permissions
PERM_DIR=775
PERM_FILE=664
GROUP_WEB="www-data"

# Working directory
WORKDIR=$(pwd)

export COMPOSER_DISABLE_XDEBUG_WARN=1
export COMPOSER_ALLOW_SUPERUSER=1

################################################################################
# Called options
################################################################################
while getopts ":ug:vf" opt; do
  case $opt in
    u)
      echo "Using user ID: $OPTARG" >&2
      ;;
    g)
      echo "Using group ID: $OPTARG" >&2
      ;;
    f)
      FORCE=true
      ;;
    v)
      VERBOSE=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

################################################################################
# Verbose echo
################################################################################
function gecho {
    if [ $VERBOSE ] ; then
        echo "$1"
    fi
}

################################################################################
# Git functions
################################################################################
function update_git {
    cd $WORKDIR
    sudo git pull --rebase

    if [ $? -ne 0 ] ; then
        echo -e "\e[97m\e[41m\n\n    A GIT PROBLEM EXISTS\n\nAborting\n\e[39m\e[49m\n"
        exit 1
    fi
}

################################################################################
# Set-up a valid Nut file
################################################################################
function go_nuts {
    cd $WORKDIR
    if [ ! -f ./app/nut ] ; then
        $SUDO echo "#!/usr/bin/env php" >> ./app/nut
        $SUDO echo "<?php" >> ./app/nut
        $SUDO echo "\$app = require __DIR__ . '/bootstrap.php';" >> ./app/nut
        $SUDO echo "/** @var \Symfony\Component\Console\Application $nut Nut Console Application */" >> ./app/nut
        $SUDO echo "\$nut = \$app['nut'];" >> ./app/nut
        $SUDO echo "\$nut->run();" >> ./app/nut

        $SUDO $CHMOD +x ./app/nut
    fi
}





################################################################################
# Composer installs
################################################################################
function composer_install {
    cd $WORKDIR
    $SUDO composer install --no-dev
    $SUDO ./app/nut extensions:setup
    cd extensions/
    $SUDO composer install --no-dev
    cd ..
}

################################################################################
# Set valid file system permissions
################################################################################
function permissions_set {
    cd $WORKDIR
    if [ -d "public/" ] ; then
        # Composer install
        for d in app/cache/ app/config/ app/database/ extensions/ public/; do
            permissions_set_helper $d
        done
    else
        for d in app/cache/ app/config/ app/database/ extensions/ files/ thumbs/ ; do
            permissions_set_helper $d
        done
    fi
    umask_set_helper
    owner_set_helper
}

function permissions_set_helper() {
    gecho "Setting up permissions for $1 directory:"
    gecho "    - directory, and subdirectories, UNIX group to $GROUP_WEB…"
    $SUDO $CHGRP -R $GROUP_WEB $1
    if [ -n "$(find $1 -type f -prune -empty)" ] ; then
        gecho "    - files in $1  to 644…"
        find $1 -type f -print0 | $SUDO $XARGS -0 $CHMOD $PERM_FILE
    fi
    gecho "    - directories to $PERM_DIR…"
    find $1 -type d -print0 | $SUDO $XARGS -0 $CHMOD $PERM_DIR
    gecho "    - sticky bit on directories in $1"
    find $1 -type d -print0 | $SUDO $XARGS -0 $CHMOD g+s
}

function owner_set_helper() {
    cd $WORKDIR
    if [ $OWNER != "" ] ; then
        gecho "Setting directory owner to $OWNER"
        sudo chown -R $OWNER $WORKDIR
    fi
}

function umask_set_helper() {
    gecho "Setting umask on cache"
    cd $WORKDIR/app/cache/
    umask u+w,g+w,o+w
    cd $WORKDIR
}

################################################################################
# Check for a .webroot file in the CURRENT directory
################################################################################
function check_webroot {
    if [ ! -f .webroot ] ; then
        webroot_not_found
    fi
    source .webroot
}

################################################################################
# Check for a .webroot file in the PARENT directory
################################################################################
function check_webroot_parent {
    if [ ! -f ../.webroot ] ; then
        webroot_not_found
    fi
    source ../.webroot
}

################################################################################
# Report a .webroot file not-found and exit
################################################################################
function webroot_not_found {
    echo "Did not find hidden .webroot file." >&2
    echo "    * You are not in the correct directory, or" >&2
    echo "    * Your home directory is not yet set up!" >&2
    echo "" >&2
    exit 1
}
